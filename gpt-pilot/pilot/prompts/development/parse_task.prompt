Ok, now, take your previous message that starts with `{{ instructions_prefix }}` and ends with `{{ instructions_postfix }}` and convert it to a list of actionable steps that will be executed by a machine. Analyze the entire message, think step by step and make sure that you don't omit any information when converting this message to steps.

Each step can be either:

* `command` - command to run (must be able to run on a {{ os }} machine, assume current working directory is project root folder)
* `save_file` -  create a NEW file
* `modify_file` - update ONE EXISTING file
* `human_intervention` - if you need the human to do something, use this type of step and explain in details what you want the human to do.

If the step is of type `save_file` or `modify_file`, it needs to contain instructions on how to change only ONE file.

{{ logs_and_error_handling }}

**IMPORTANT**: In `code_change_description` field of `modify_file` step, you must provide full information (including code samples, if any) from the previous message, so that the developer can correctly implement the change.  For `save_file`, you MUST include FULL file contents, without omitting anything or adding comments like `// rest of the code goes here`.

Examples:
------------------------example_1---------------------------
```
{
  "tasks": [
    {
      "type": "modify_file",
      "modify_file": {
        "name": "server.js",
        "path": "/server.ejs",
        "code_change_description": "Update code to use port from environment instead of hardcoding it.\nReplace this line:\nconst port = 3001;\nwith\nconst port = process.env.PORT || 3001;\n",
      },
    },
    {
      "type": "modify_file",
      "modify_file": {
        "name": "server.js",
        "path": "/server.ejs",
        "code_change_description": "Within findByEmail() method of User model, replace `return await User.find({email});` with a try/catch block:\ntry\n{  return await User.find({email});\n} catch (err)\n{ return null; }\n",
      },
    },
    {
      "type": "save_file",
      "save_file": {
        "name": "README.md",
        "path": "/README.md",
        "content": "# Example Readme\n\nThis is an example readme for the example project.\n\nThanks to everyone who contributes to this repository!\n"
      }
    }
  ]
}
```
------------------------end_of_example_1---------------------------

Within the file modifications, mark any settings that the user must configure manually with `// INPUT_REQUIRED {input_description}` comment,  where `input_description` is a description of what needs to be added here by the user. Use appropriate syntax for comments in the file you're saving. If the file type doesn't support comments (eg JSON), don't add any.

Remember: you must provide all the information (context) for file modification steps that you thought of in the previous message, so that the developer can correctly implement your changes. This is very important!
